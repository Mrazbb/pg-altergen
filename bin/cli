#! /usr/bin/env node
require('total5');

const REG = require('../regpatterns');
const schemas = require('../schemas');
const tables = require('../tables');
const files = require('../files');
const others = require('../others');
const insert = require('../insert');
const indexes = require('../indexes');
const fs = require('fs');
const ARGS = process.argv; // TEST: ['-', '-', 'CMD']
const DIR = process.cwd();
const DIVIDER = '----------------------------------------';

let alter = '';


async function load(args) {

	var cmd = (args[2] || '').replace(/-{2,}/g, '');
	
	global.config = {};

	for (let i = 3; i < args.length; i++){
		if (args[ i ].startsWith('--') && args.length > i + 1) {
			config[ args[ i ].replace(/--/g, '') ] = args[ i + 1 ];
			i++;	
		}
	}

	if(!config['config']){
		config['config'] = 'altergen.json';
	}
	
	let obj = F.Fs.readFileSync(config[ 'config' ], 'utf8');

	if(!obj){
		console.log('Config file not found');
		return;
	}

	let conf = JSON.parse(obj);
	
	for (let key in conf) {
		config[ key ] = conf[ key ];
	}

	MAIN.schemas = [];
	MAIN.tables = [];
	MAIN.others = [];

	if(cmd == 'generate'){
		generate();

	} else if (cmd == 'migrate'){
		await migrate();

	} else {
		console.log(`Command not found: ${cmd}`);
	}
	
}

function generate () {
	// SCHEMA
	let schemafiles = files.listfiles('schemas', 'all');
	alter += schemas.generate(schemafiles) + '\n-- step\n';
	
	// TABLES
	let tablefiles = files.listfiles('tables', 'all');
	let table_res = tables.generate(tablefiles);
	
	// OTHERS (views, functions, procedures)
	let othersfiles = files.listfiles('others', 'all');
	let others_res = others.generate(othersfiles);
	
	alter += [
		...table_res.drop_constraints,
		...others_res.drop,
		...table_res.create,
		...table_res.constraints,
		...others_res.create
	].join('\n-- step\n') + '\n-- step\n';
	
	// INDEXES
	let indexfiles = files.listfiles('tables', 'all');
	alter += indexes.generate(indexfiles) + '\n-- step\n';
	
	// INSERTS
	let insertfiles = files.listfiles('inserts', 'all');
	alter += insert.generate(insertfiles);
	
	// NOTES
	let config_copy = COPY(config);
	delete config_copy[ 'postgres' ];
	//version from npm package.json

	let version = require('../package.json').version;
	let note = `-- This file was generated by pg-altergen v${version}\n-- ${new Date().toISOString()}\n\n-- with config:\n\n-- The MIT License (MIT)\n-- © 2024 Marek Mráz <info@marek-mraz.com>`

	for (let key in config_copy) {
		note += `--   ${key}: ${JSON.stringify(config_copy[ key ])}\n`;
	}
	

	// OUTPUT
	fs.writeFileSync(config['outputFile'], note + '\n' + alter + '\n' + note);
}

async function migrate () {
	console.log('Migrating...');

	require('querybuilderpg').init('', "postgresql://" + config['postgres'],  10, ERROR('PostgreSQL'));
	console.time('Migration time');	
	let alter_file = fs.readFileSync(config[ 'outputFile' ], 'utf8');
	let alter_array = alter_file.split('-- step');
	

	let begin = 0;
	let end = alter_array.length;
	let middle = 0;
	
	// binary search for error (firstly check all queries)
	// and only run that portion of query

	let iserror = false;
	try {
		await DATA.query(alter_file).promise();
		console.timeEnd('Migration time');
		console.log('Migration completed');
	} catch (e) {
		iserror = true;
	}


	// binary search for error
	while (begin < end && iserror) {
		middle = Math.floor((begin + end) / 2);
		let query = alter_array.slice(begin, middle).join('\n');
		try {
			await DATA.query(query).promise();
			begin = middle + 1;
		} catch (e) {
			end = middle;
		}
	} 
	
	// if error found, check the last query
	if (begin == end && iserror) {
		let query = '';
		try {
			query = alter_array.slice(middle - 1, middle).join('\n');
			await DATA.query(query).promise();
			console.log('Migration completed');
			console.log('begin:', begin, 'end:', end, 'middle:', middle, 'query:', query);
		} catch (e) {
			console.log(DIVIDER);
			console.log('Query:\n\n ', query);
			console.log(DIVIDER);
			console.log('Error: \n\n', e);
		}
	}


	process.exit(0);
	
	

	

	

	
}

setTimeout(load, 100, ARGS);





